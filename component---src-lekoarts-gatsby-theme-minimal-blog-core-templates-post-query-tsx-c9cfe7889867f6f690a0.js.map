{"version":3,"sources":["webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/post.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog-core/templates/post-query.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog-core/components/post.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/item-tags.tsx"],"names":["shadow","map","v","Post","data","post","mdx","bannerSrc","R","tableOfContents","title","description","excerpt","image","pathname","slug","canonicalUrl","as","variant","sx","color","mt","a","fontSize","date","tags","Fragment","timeToRead","my","boxShadow","join","body","PostComponent","props","ItemTags","useMinimalBlogConfig","tagsPath","basePath","filter","x","includes","tag","i","key","LocalizedLink","to","replaceSlashes","name"],"mappings":"8NAyCMA,EADK,CAAC,OAAD,oBACOC,KAAI,SAACC,GAAD,iCAAkCA,EAAlC,IAAuCA,EAAvC,UAuDPC,EArDF,SAAC,GAAuC,QAArCC,KAAQC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,IAC5B,IAAKD,EACH,OAAO,gEAET,IAAME,EAAYC,IAAO,CAAC,SAAU,kBAAmB,SAAU,OAAQH,GACjEI,GAAoBH,GAAO,IAA3BG,gBACR,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEC,MAAOL,EAAKK,MACZC,YAAaN,EAAKM,YAAcN,EAAKM,YAAcN,EAAKO,QACxDC,MAAON,EACPO,SAAUT,EAAKU,KACfC,aAAcX,EAAKW,eAErB,YAAC,IAAD,CAASC,GAAG,KAAKC,QAAQ,aACtBb,EAAKK,OAER,iBACES,GAAI,CACFC,MAAO,YACPC,GAAI,EACJC,EAAG,CAAEF,MAAO,aACZG,SAAU,CAAC,EAAG,EAAG,KAGnB,wBAAOlB,EAAKmB,MACXnB,EAAKoB,MACJ,YAAC,IAAMC,SAAP,WAEE,YAAC,IAAD,CAAUD,KAAMpB,EAAKoB,QAGxBpB,EAAKsB,YAAL,MACAtB,EAAKsB,YAAc,wBAAOtB,EAAKsB,WAAZ,cAEtB,uBACER,GAAI,CACFS,GAAI,EACJ,6BAA8B,CAC5BA,GAAI,CAAC,EAAG,EAAG,GACXC,UAAW7B,EAAO8B,KAAP,OAEbZ,QAAS,mBAGX,YAAC,IAAD,CAAcd,KAAMK,IACpB,YAAC,cAAD,KAAcJ,EAAK0B,SCvFZC,UCQA,YAAkD,IAAhBC,EAAgB,oBAC/D,OAAO,kBAAC,EAASA,K,kCCZnB,yEAmCeC,IAtBE,SAAC,GAAwB,IAAtBT,EAAsB,EAAtBA,KAAsB,EACTU,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMX,SAAP,KACGD,EACEa,QAAO,SAACC,GAAD,OAAQ,CAAC,UAAW,WAAWC,SAASD,EAAExB,SACjDd,KAAI,SAACwC,EAAKC,GAAN,OACH,kBAAC,IAAMhB,SAAP,CAAgBiB,IAAKF,EAAI1B,QACpB2B,GAAF,KACD,kBAAC,IAAD,CACEzB,GAAI2B,IACJC,GAAIC,YAAe,IAAIT,EAAL,IAAiBD,EAAjB,IAA6BK,EAAI1B,OAElD0B,EAAIM","file":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-post-query-tsx-c9cfe7889867f6f690a0.js","sourcesContent":["/** @jsx jsx */\nimport { jsx, Heading } from 'theme-ui'\nimport * as R from 'ramda'\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport React from 'react'\nimport Layout from './layout'\nimport ItemTags from './item-tags'\nimport SEO from './seo'\nimport { TocContainer } from './toc'\n\ntype PostProps = {\n  data: {\n    mdx: {\n      slug: string\n      tableOfContents?: any\n    }\n    post: {\n      slug: string\n      title: string\n      date: string\n      tags?: {\n        name: string\n        slug: string\n      }[]\n      description?: string\n      canonicalUrl?: string\n      body: string\n      excerpt: string\n      timeToRead?: number\n      banner?: {\n        childImageSharp: {\n          resize: {\n            src: string\n          }\n        }\n      }\n    }\n  }\n}\n\nconst px = [`32px`, `16px`, `8px`, `4px`]\nconst shadow = px.map((v) => `rgba(0, 0, 0, 0.15) 0px ${v} ${v} 0px`)\n\nconst Post = ({ data: { post, mdx } }: PostProps) => {\n  if (!post) {\n    return <div>This page has not been translated yet</div>\n  }\n  const bannerSrc = R.path(['banner', 'childImageSharp', 'resize', 'src'], post)\n  const { tableOfContents } = mdx || {}\n  return (\n    <Layout>\n      <SEO\n        title={post.title}\n        description={post.description ? post.description : post.excerpt}\n        image={bannerSrc}\n        pathname={post.slug}\n        canonicalUrl={post.canonicalUrl}\n      />\n      <Heading as=\"h1\" variant=\"styles.h1\">\n        {post.title}\n      </Heading>\n      <p\n        sx={{\n          color: `secondary`,\n          mt: 3,\n          a: { color: `secondary` },\n          fontSize: [1, 1, 2],\n        }}\n      >\n        <time>{post.date}</time>\n        {post.tags && (\n          <React.Fragment>\n            {` — `}\n            <ItemTags tags={post.tags} />\n          </React.Fragment>\n        )}\n        {post.timeToRead && ` — `}\n        {post.timeToRead && <span>{post.timeToRead} min read</span>}\n      </p>\n      <section\n        sx={{\n          my: 5,\n          '.gatsby-resp-image-wrapper': {\n            my: [4, 4, 5],\n            boxShadow: shadow.join(`, `),\n          },\n          variant: `layout.content`,\n        }}\n      >\n        <TocContainer data={tableOfContents} />\n        <MDXRenderer>{post.body}</MDXRenderer>\n      </section>\n    </Layout>\n  )\n}\n\nexport default Post\n","import { graphql } from 'gatsby'\nimport PostComponent from '../components/post'\n\nexport default PostComponent\n\nexport const query = graphql`\n  query(\n    $locale: String!\n    $id: String!\n    $slug: String!\n    $formatString: String!\n  ) {\n    mdx(children: { elemMatch: { id: { eq: $id } } }) {\n      slug\n      tableOfContents(maxDepth: 3)\n    }\n    post(slug: { eq: $slug }, fields: { locale: { eq: $locale } }) {\n      slug\n      title\n      date(formatString: $formatString)\n      tags {\n        name\n        slug\n      }\n      body\n      description\n      canonicalUrl\n      excerpt\n      timeToRead\n      banner {\n        childImageSharp {\n          resize(width: 1200, quality: 90) {\n            src\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport Post from '../../gatsby-theme-minimal-blog/components/post'\n\ntype Props = {\n  data: {\n    post: any\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function MinimalBlogCorePost({ ...props }: Props) {\n  return <Post {...props} />\n}\n","import React from 'react'\nimport { Link as TLink } from 'theme-ui'\nimport { LocalizedLink } from 'gatsby-theme-i18n'\nimport useMinimalBlogConfig from '../hooks/use-minimal-blog-config'\nimport replaceSlashes from '../utils/replaceSlashes'\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags\n        .filter((x) => !['project', 'summary'].includes(x.slug))\n        .map((tag, i) => (\n          <React.Fragment key={tag.slug}>\n            {!!i && `, `}\n            <TLink\n              as={LocalizedLink}\n              to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}\n            >\n              {tag.name}\n            </TLink>\n          </React.Fragment>\n        ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n"],"sourceRoot":""}