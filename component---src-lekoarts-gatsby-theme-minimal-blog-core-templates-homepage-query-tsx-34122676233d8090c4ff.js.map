{"version":3,"sources":["webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/item-tags.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/texts/hero.mdx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/homepage.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog-core/templates/homepage-query.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/blog-list-item.tsx","webpack:///./src/@lekoarts/gatsby-theme-minimal-blog/components/listing.tsx"],"names":["ItemTags","tags","useMinimalBlogConfig","tagsPath","basePath","Fragment","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","Text","props","console","warn","layoutProps","_frontmatter","MDXContent","components","mdxType","sx","fontSize","fontWeight","color","isMDXComponent","Homepage","posts","data","allPost","nodes","blogPath","siteTitle","useSiteMetadata","visuallyHidden","mb","p","mt","variant","text","showTags","HomepageComponent","BlogListItem","post","title","a","date","Listing","className"],"mappings":"2FAAA,yEA8BeA,IAjBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EACTC,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMC,SAAP,KACGJ,EAAKK,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACpBF,GAAF,KACD,kBAAC,IAAD,CAAOG,GAAIC,OAAMC,GAAIC,YAAe,IAAIV,EAAL,IAAiBD,EAAjB,IAA6BI,EAAIG,OACjEH,EAAIQ,a,+CCbKA,E,gJAKhBC,GALgBD,EAKK,OALG,SAA6BE,GAEzD,OADAC,QAAQC,KAAK,aAAeJ,EAAO,2EAC5B,oBAASE,KAIZG,EAAc,CAClBC,aAT0B,IAYb,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGN,EACF,8BACD,OAAO,cALS,UAKT,iBAAeG,EAAiBH,EAAhC,CAAuCM,WAAYA,EAAYC,QAAQ,cAC5E,cAACR,EAAD,CAAMS,GAAI,CACRC,SAAU,CAAC,EAAG,EAAG,GACjBC,WAAY,OACZC,MAAO,WACNJ,QAAQ,QAJX,OAOA,uHAKJF,EAAWO,gBAAiB,ECJ5B,IA6BeC,EA7BE,SAAC,GAAyB,IAErBC,EAFqB,EAAvBC,KAEhBC,QAAWC,MAF4B,EAIVhC,cAAvBE,EAJiC,EAIjCA,SAAU+B,EAJuB,EAIvBA,SACVC,EAAcC,cAAdD,UAER,OACE,YAAC,IAAD,KACE,kBAAIX,GAAIa,KAAiBF,GACzB,uBACEX,GAAI,CACFc,GAAI,CAAC,EAAG,EAAG,GACXC,EAAG,CAAEd,SAAU,CAAC,EAAG,EAAG,GAAIe,GAAI,GAC9BC,QAAS,iBAGX,YAAC,EAAD,OAEF,YAAC,IAAD,CAAOC,KAAK,gBACV,YAAC,OAAD,CAAM9B,GAAIC,YAAe,IAAIV,EAAL,IAAiB+B,IAAzC,mBAIF,YAAC,IAAD,CAASJ,MAAOA,EAAOa,UAAU,MCrDxBC,a,2GCqCAC,EAjBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASH,gBAAT,gBACnB,YAAC,IAAD,CAAKL,GAAI,GACP,YAAC,IAAD,CAAO5B,GAAIC,OAAMC,GAAIkC,EAAKrC,KAAMe,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIE,MAAO,SAC/DmB,EAAKC,OAER,iBAAGvB,GAAI,CAAEG,MAAO,YAAaa,GAAI,EAAGQ,EAAG,CAAErB,MAAO,aAAeF,SAAU,CAAC,EAAG,EAAG,KAC9E,wBAAOqB,EAAKG,MACXH,EAAK9C,MAAQ2C,GACZ,YAAC,IAAMvC,SAAP,WAEE,YAAC,IAAD,CAAUJ,KAAM8C,EAAK9C,WCHhBkD,IATC,SAAC,GAAD,IAAGpB,EAAH,EAAGA,MAAH,IAAUqB,iBAAV,eAA0BR,gBAA1B,gBACd,uBAASnB,GAAI,CAAEc,GAAI,CAAC,EAAG,EAAG,IAAMa,UAAWA,GACxCrB,GACCA,EAAMzB,KAAI,SAACyC,GAAD,OACR,YAAC,EAAD,CAActC,IAAKsC,EAAKrC,KAAMqC,KAAMA,EAAMH,SAAUA","file":"component---src-lekoarts-gatsby-theme-minimal-blog-core-templates-homepage-query-tsx-34122676233d8090c4ff.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useMinimalBlogConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink as={Link} to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}>\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Text = makeShortcode(\"Text\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <Text sx={{\n      fontSize: [4, 5, 6],\n      fontWeight: `bold`,\n      color: `heading`\n    }} mdxType=\"Text\">\n  Hi.\n    </Text>\n    <p>{`I’m a software developer and technical lead with 10 years’ experience in software industry.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport { Link } from \"gatsby\";\nimport Layout from \"./layout\";\nimport Title from \"./title\";\nimport Listing from \"./listing\";\nimport List from \"./list\";\nimport useMinimalBlogConfig from \"../hooks/use-minimal-blog-config\";\nimport useSiteMetadata from \"../hooks/use-site-metadata\";\nimport replaceSlashes from \"../utils/replaceSlashes\";\nimport { visuallyHidden } from \"../styles/utils\";\n// @ts-ignore\nimport Hero from \"../texts/hero\";\n// @ts-ignore\n// import Bottom from \"../texts/bottom\"\n\ntype PostsProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n  [key: string]: any;\n};\n\nconst Homepage = ({ data }: PostsProps) => {\n  const {\n    allPost: { nodes: posts },\n  } = data;\n  const { basePath, blogPath } = useMinimalBlogConfig();\n  const { siteTitle } = useSiteMetadata();\n\n  return (\n    <Layout>\n      <h1 sx={visuallyHidden}>{siteTitle}</h1>\n      <section\n        sx={{\n          mb: [5, 6, 7],\n          p: { fontSize: [1, 2, 3], mt: 2 },\n          variant: `section_hero`,\n        }}\n      >\n        <Hero />\n      </section>\n      <Title text=\"Latest Posts\">\n        <Link to={replaceSlashes(`/${basePath}/${blogPath}`)}>\n          Read all posts\n        </Link>\n      </Title>\n      <Listing posts={posts} showTags={false} />\n    </Layout>\n  );\n};\n\nexport default Homepage;\n","import { graphql } from \"gatsby\";\nimport HomepageComponent from \"../../gatsby-theme-minimal-blog/components/homepage\";\n\nexport default HomepageComponent;\n\nexport const query = graphql`\n  query($formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, limit: 3) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`;\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` — `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\";\nimport BlogListItem from \"./blog-list-item\";\n\ntype ListingProps = {\n  posts: {\n    slug: string;\n    title: string;\n    date: string;\n    excerpt: string;\n    description: string;\n    timeToRead?: number;\n    tags?: {\n      name: string;\n      slug: string;\n    }[];\n  }[];\n  className?: string;\n  showTags?: boolean;\n};\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts &&\n      posts.map((post) => (\n        <BlogListItem key={post.slug} post={post} showTags={showTags} />\n      ))}\n  </section>\n);\n\nexport default Listing;\n"],"sourceRoot":""}